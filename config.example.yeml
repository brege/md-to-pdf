# config.example.yaml
# Example configuration for the md-to-pdf converter.
# Copy this to config.yaml and customize it to your needs.

# --- Global Settings ---

# Command to use for opening generated PDF files.
# Set to null, an empty string, or remove the line to disable auto-opening.
# Examples: "firefox", "evince", "open" (macOS), "xdg-open" (Linux), "start" (Windows)
pdf_viewer: "firefox"

# Global PDF options that apply to all document types unless overridden.
# Refer to Puppeteer's page.pdf() options for available settings.
global_pdf_options:
  format: "Letter" # Default page format (e.g., Letter, Legal, A4, A5)
  printBackground: true # Whether to print background graphics.
  margin: # Default margins for all sides.
    top: "1in"
    right: "1in"
    bottom: "1in"
    left: "1in"
  # Example: To set a header or footer template (HTML string).
  # headerTemplate: "<div style='font-size:10px; margin-left:1cm;'>My Header</div>"
  # footerTemplate: "<div style='font-size:10px; margin:0 auto;'><span class='pageNumber'></span> / <span class='totalPages'></span></div>"
  # displayHeaderFooter: false # Set to true if using header/footer templates.

# Global regular expression patterns (as strings) for content/shortcodes to remove
# from all documents *before* Markdown rendering. These are applied first.
# Type-specific patterns are applied after these.
global_remove_shortcodes:
  - "" # Example: Remove all HTML comments
  # - "{{< note >}}(.*?){{< /note >}}" # Example: Remove a custom "note" shortcode

# --- Document Type Specific Configurations ---
# Define different configurations for various types of documents.
# The 'default' type is used if no specific type matches or if a type is missing settings.
document_types:
  default:
    description: "Default settings if no other document type matches."
    css_files: ["default.css"] # List of CSS files in the 'css/' directory.
                               # css/default.css will need to be created.
    pdf_options: {} # Inherits all from global_pdf_options unless specified here.
                    # Example: override format for default type
                    # format: "A4"
    toc_options: { enabled: false } # Table of Contents settings.
    # inject_fm_title_as_h1: false # Set to true to automatically use FM title as H1.
    # aggressiveHeadingCleanup: false # Set to true to remove existing H1/H2s when injecting FM title.

  cv:
    description: "For Curriculum Vitae documents."
    css_files: ["cv.css"]
    pdf_options:
      format: "Letter" # CVs often use Letter format.
      margin:
        top: "0.75in"
        right: "0.75in"
        bottom: "0.75in"
        left: "0.75in"
    toc_options: { enabled: false } # TOC usually not needed for CVs.
    inject_fm_title_as_h1: true # Assumes CV title comes from front matter.

  cover-letter:
    description: "For Cover Letter documents."
    css_files: ["cover-letter.css"]
    pdf_options:
      format: "Letter"
      margin:
        top: "1in"
        right: "1in"
        bottom: "1in"
        left: "1in"
    toc_options: { enabled: false }
    inject_fm_title_as_h1: false # Cover letters often have complex headers, H1 might not be from FM title.

  recipe:
    description: "Settings for individual Recipe documents (not part of a recipe book)."
    css_files: ["recipe.css"]
    pdf_options:
      margin:
        top: "0.8in"
        right: "0.8in"
        bottom: "0.8in"
        left: "0.8in"
    toc_options: { enabled: false } # Usually no TOC for single recipes.
    # Patterns specific to 'recipe' type, applied after global_remove_shortcodes.
    remove_shortcodes_patterns:
      - "{{%\\s*recipe\\s*%}}" # Example: Remove Hugo's {{% recipe %}} shortcode start
      - "{{%\\s*/recipe\\s*%}}" # Example: Remove Hugo's {{% /recipe %}} shortcode end
    inject_fm_title_as_h1: true # Common for recipes: use FM 'title' as the main H1.
                                # This will also trigger aggressiveHeadingCleanup if set.
    aggressiveHeadingCleanup: true # If inject_fm_title_as_h1 is true, this will remove
                                   # any H1/H2 from content before adding the FM title as H1,
                                   # useful if recipes sometimes have titles in content.

  recipe-book:
    description: "Settings for the combined Recipe Book PDF."
    css_files: ["recipe.css", "recipe-book.css"] # Multiple CSS files can be used.
    pdf_options:
      margin:
        top: "0.8in"
        right: "0.8in"
        bottom: "0.8in"
        left: "0.8in"
      # Example: Different footer for recipe book
      # footerTemplate: "<div style='font-size:9pt; width:100%; text-align:center; padding-bottom:0.5cm;'>Page <span class='pageNumber'></span> of <span class='totalPages'></span></div>"
      # displayHeaderFooter: true
    cover_page:
      enabled: true
      title: "My Family Cookbook"
      subtitle: "A Collection of Treasured Recipes"
      author: "The Family Chef"
    toc_options:
      enabled: true
      placeholder: "%%RECIPE_BOOK_TOC%%" # Markdown placeholder to be replaced by the TOC.
      level: [1] # Include H1 level headings in the TOC (titles of recipes).
      listType: "ol" # 'ol' for ordered list, 'ul' for unordered.
    # These shortcodes are removed from *each recipe file* before concatenation into the book.
    remove_shortcodes_patterns:
      - "{{%\\s*recipe\\s*%}}"
      - "{{%\\s*/recipe\\s*%}}"
    # For recipe book items, inject_fm_title_as_h1 and aggressiveHeadingCleanup are handled by
    # the RecipeBookBuilder itself (it always injects a title and cleans).

# --- Hugo Export Each Command Specific Configuration ---
# Settings for the `hugo-export-each` command, which processes Hugo content
# (like recipes) into individual PDFs with slug-author-date naming.
hugo_export_each:
  # Define one or more "rulesets" for processing different Hugo sections or types.
  # The `cli.js hugo-export-each` command uses `--hugo-ruleset <ruleset_name>`
  # to select which ruleset to apply. "default_rules" is used if no ruleset is specified.

  default_rules: # A default ruleset, can be named anything.
    # Regex to extract author(s) from the *body content* of the Markdown file.
    # The first capture group should be the author name(s).
    # Example: Extracts "John Doe" from "**Chef:** John Doe" or "Chefs: Jane Doe, John Doe"
    author_extraction_regex: "^[ \\t]*\\**(?:Chef|Chefs):\\s*\\**([^\\*<\\n\\r]+)"
    
    # Optional regex to determine if the matched author line implies multiple authors
    # (for appending "-et-al" to the first author if multiple are comma-separated).
    # This regex checks the *full line* that `author_extraction_regex` matched on.
    # Example: If `author_extraction_regex` matched on "Chefs: Jane Doe, John Doe",
    # this `author_is_list_regex` (matching "Chefs:") confirms it's a list.
    author_is_list_regex: "^[ \\t]*\\**(?:Chefs):"

    # Additional shortcodes to remove specifically for items processed by this ruleset.
    # These are applied *after* `global_remove_shortcodes` but *before* any
    # `remove_shortcodes_patterns` from the item's base document type (e.g., 'recipe' type).
    # This ensures Hugo-specific shortcodes are cleaned from Hugo source files.
    additional_shortcodes_to_remove:
      - "{{%\\s*recipe\\s*%}}"         # Example: Hugo's opening recipe shortcode
      - "{{%\\s*/recipe\\s*%}}"        # Example: Hugo's closing recipe shortcode
      - "{{<\\s*(figure|imgproc)\\s+[^>]*?>}}" # Example: Remove Hugo figure/imgproc shortcodes (basic)
      - "{{<\\s*/?\\s*(param|highlight|gallery|notice)\\s*[^>]*?>}}" # More examples
      - "{{%\\s*/?\\s*(param|highlight|gallery|notice)\\s*[^%]*?%}}" # Paired shortcodes

  # You can define other rulesets here, e.g., for a different section of your Hugo site:
  # another_ruleset:
  #   author_extraction_regex: "Author:\\s*(.*)"
  #   additional_shortcodes_to_remove:
  #     - "{{< custom_shortcode >}}"
