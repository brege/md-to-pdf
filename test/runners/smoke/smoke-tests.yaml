# Smoke test manifest - all CLI smoke tests
name: "config (End-to-End Test) src/cli/commands/config.command.js"
base_command: "md-to-pdf"
tags: [config, pure, cli, smoke]
scenarios:
  - description: "3.3.1 Global config (default)"
    args: "config"
    expect:
      contains: "pdf_viewer:"

  - description: "3.3.2 Plugin config (default)"
    args: "config --plugin default"
    expect:
      contains_all: ["handler_script:", "Plugin Base Path:"]

  - description: "3.3.3 Global config (--pure)"
    args: "config --pure"
    expect:
      yaml_has_key: "pdf_viewer"

  - description: "3.3.4 Plugin config (--pure)"  # new
    args: "config --plugin cv --pure"
    expect:
      yaml_has_key: "handler_script"

---
name: "--version (End-to-End Test) cli.js"
base_command: "md-to-pdf"
tags: [cli, version, smoke]
scenarios:
  - description: "3.15.1 --version"
    args: "--version"
    expect:
      executes: true

---
name: "--help (End-to-End Test) cli.js src/cli/get-help.js"
base_command: "md-to-pdf"
tags: [cli, help, smoke]
discovery:
  type: "cli_commands"
  source: "src/cli/commands"
  exclude: ["$0", "plugin", "collection"]
scenarios:
  - description: "3.15.2 Help for {command}"
    args: "{command} --help"
    expect:
      executes: true

---
#name: "asdf/--asdf (End-to-End Test) cli.js (unknown command/option)"
#base_command: "md-to-pdf"
#tags: [cli, smoke, sad-path]
#scenarios:
#  - description: "3.15.3 Unrecognized command"
#    args: "asdf"
#    expect:
#      executes: false
#    visual_check: "Clear messaging for unrecognized command"


---
name: "plugin list (End-to-End Test) src/cli/commands/plugin/list.command.js"
base_command: "md-to-pdf"
tags: [cli, smoke, plugin, list]
scenarios:
  - description: "3.4.1 List plugins (default)"
    args: "plugin list"
    expect:
      contains: "usable by md-to-pdf"

  - description: "3.4.2 List enabled plugins"
    args: "plugin list --enabled"
    expect:
      contains: "Enabled plugins"

  - description: "3.4.3 List disabled plugins"
    args: "plugin list --disabled"
    expect:
      contains_any: ["Disabled (but available) CM-managed plugins", "No disabled (but available) CM-managed plugins found."]

  - description: "3.4.4 List available plugins"
    args: "plugin list --available"
    expect:
      contains_any: ["Available CM-managed plugins", "No CM-managed plugins found"]

  - description: "3.4.5 List plugins (--short)"  # new
    args: "plugin list --short"
    expect:
      contains_any: ["Summary for all known plugins"]

---
name: "plugin list (End-to-End Test) Plugin List States (Full vs Empty)"
base_command: "md-to-pdf"
tags: [cli, smoke, plugin, list, enable, disable]
visual_focus: "empty state handling, table formatting consistency"
scenarios:
  - description: "Plugin list --available (likely empty) - empty state formatting"
    args: "plugin list --available"
    expect:
      executes: true
    visual_check: "Clean empty state with consistent theming and helpful messaging"

  - description: "Plugin list --disabled (likely empty) - empty state vs populated"
    args: "plugin list --disabled"
    expect:
      executes: true
    visual_check: "Empty state handling or populated list with proper disabled styling"

  - description: "Plugin list (populated) - full table formatting"
    args: "plugin list"
    expect:
      executes: true
    visual_check: "Rich populated table with headers, colors, and proper alignment"

---
name: "collection list (End-to-End Test) src/cli/commands/collection/list.command.js"
base_command: "md-to-pdf"
tags: [cli, smoke, collection, list]
scenarios:
  - description: "3.11.1 List downloaded collections (default)"
    args: "collection list names"
    expect:
      contains_any: ["Downloaded plugin collections", "No downloaded collections found"]

  - description: "3.11.2 List collection names (short)"  # new
    args: "collection list names --short"
    expect:
      contains_any: ["Downloaded plugin collections", "No downloaded collections found"]

  - description: "3.11.3 List available plugins from collections" # new
    args: "collection list available"
    expect:
      contains_any: ["Available plugins", "No available plugins found in any collection"]

  - description: "3.11.4 List enabled plugins from collections"  # new
    args: "collection list enabled"
    expect:
      contains_any: ["Enabled plugins", "No enabled plugins found"]

  - description: "3.11.5 List all plugins (alias for available)"  # new
    args: "collection list all"
    expect:
      contains_any: ["Available plugins", "No available plugins found in any collection"]

---
name: "collection list (End-to-End Test) Collection List States (Full vs Empty)"
base_command: "md-to-pdf"
tags: [cli, smoke, collection, list, enable, disable, happy-path, sad-path]
visual_focus: "empty state consistency, messaging clarity"
scenarios:
  - description: "Collection list names (likely empty) - empty state"
    args: "collection list names"
    expect:
      executes: true
    visual_check: "Clean empty state messaging with consistent theming"

  - description: "Collection list available (empty) - no available plugins state"
    args: "collection list available"
    expect:
      executes: true
    visual_check: "Empty state for no available collection plugins"

  - description: "Collection list enabled (empty) - no enabled plugins state"
    args: "collection list enabled"
    expect:
      executes: true
    visual_check: "Empty state for no enabled collection plugins"

---
name: "Context Switching Empty States"
base_command: "md-to-pdf"
tags: [cli, smoke, coll-root, sad-path]
visual_focus: "error handling, context isolation, empty state consistency"
scenarios:
  - description: "Plugin list with non-existent collection root - context error handling"
    args: "plugin list --coll-root /tmp/nonexistent"
    expect:
      executes: true
    visual_check: "Graceful handling of missing collection root with clear messaging"

  - description: "Collection list with non-existent collection root - context isolation"
    args: "collection list names --coll-root /tmp/nonexistent"
    expect:
      executes: true
    visual_check: "Clean empty state when collection root doesn't exist"

