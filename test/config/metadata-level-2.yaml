'# Level 2 - Test Metadata Registry': null
'# Central registry connecting test metadata, commands, files, and documentation': null
metadata:
  level: 2
  scope: Level 2 test scenarios
  type: Subsystem Integration Tests
  description: >-
    Subsystem integration tests ensuring major components work together - collections management,
    PDF generation pipeline, document processing, and plugin validation systems
tests:
  2.1.1:
    description: >-
      Verify the constructor correctly initializes file paths (`cmCollRoot`, `cmMainManifestPath`,
      `cmEnabledManifestPath`) based on `projectRoot` and `XDG_DATA_HOME`.
    commands: []
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.constructor.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.2:
    description: >-
      Verify the constructor correctly prioritizes the CLI override (`collRootCliOverride`) for
      setting the `collRoot` path over all other methods (environment variables, config files, or
      defaults).
    commands: []
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.constructor.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.3:
    description: >-
      Verify `addCollection` successfully clones a Git repository or downloads a zip file, creates
      the collection directory, and updates `cm-main.yaml`.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.add.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.4:
    description: >-
      Test `addCollection` handles attempts to add a collection with a name that already exists,
      preventing duplication.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.add.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.5:
    description: >-
      Verify `addCollection` gracefully handles invalid source URLs or paths, reporting appropriate
      errors.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.add.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.6:
    description: >-
      Test `addCollection` correctly uses `cm-utils.deriveCollectionName` to sanitize the collection
      name.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.add.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.7:
    description: >-
      Verify `removeCollection` successfully removes a collection entry from `cm-main.yaml` and
      deletes its corresponding directory.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.remove.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.8:
    description: Test `removeCollection` gracefully handles attempts to remove a non-existent collection.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.remove.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.9:
    description: >-
      Verify `removeCollection` handles cases where the collection's directory cannot be deleted
      (e.g., due to permissions), logging an error but still updating the manifest.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.remove.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.10:
    description: Test `updateCollection` successfully pulls updates for a Git-sourced collection.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.update.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.11:
    description: Verify `updateCollection` gracefully handles updating a non-existent collection.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.update.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.12:
    description: >-
      Test `updateCollection` handles update failures (e.g., network issues, conflicts) for a
      Git-sourced collection.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.update.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.13:
    description: >-
      Verify `listCollections` returns a comprehensive list of all collections from `cm-main.yaml`
      when `filter` is 'all', including their enabled status from `enabled.yaml`.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.14:
    description: >-
      Test `listCollections` correctly filters and returns only 'enabled' collections when `filter`
      is 'enabled'.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.15:
    description: >-
      Verify `listCollections` correctly filters and returns only 'disabled' collections when
      `filter` is 'disabled'.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.16:
    description: >-
      Test `listCollections` handles cases where `cm-main.yaml` or `enabled.yaml` are missing or
      empty.
    commands:
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.17:
    description: >-
      Verify `enablePlugin` successfully adds a plugin to `enabled.yaml` with the specified
      `invokeName`, `collectionName`, and `pluginId`, ensuring the plugin's config path is resolved
      and valid.
    commands:
      - plugin
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.enable-disable.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.18:
    description: >-
      Test `enablePlugin` correctly prevents enabling a plugin if the `invokeName` already exists in
      `enabled.yaml`.
    commands:
      - plugin
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.enable-disable.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.19:
    description: >-
      Verify `enablePlugin` handles attempts to enable a plugin that does not exist within the
      specified collection.
    commands:
      - plugin
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.enable-disable.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.20:
    description: Test `enablePlugin` correctly uses `cm-utils.isValidPluginName` to validate the `invokeName`.
    commands:
      - plugin
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.enable-disable.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.21:
    description: Verify `enablePlugin` handles cases where the plugin's resolved config path does not exist.
    commands:
      - plugin
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.enable-disable.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.22:
    description: >-
      Test `disablePlugin` successfully removes a plugin entry from `enabled.yaml` based on its
      `invokeName`.
    commands:
      - plugin
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.enable-disable.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.23:
    description: Verify `disablePlugin` gracefully handles attempts to disable a non-existent `invokeName`.
    commands:
      - plugin
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.enable-disable.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.24:
    description: >-
      Test `listAvailablePlugins` correctly scans all collections for `*.config.yaml` files and
      extracts available plugin details (name, description, configPath).
    commands:
      - plugin
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.25:
    description: Verify `listAvailablePlugins` correctly filters results when a `collectionName` is provided.
    commands:
      - plugin
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.26:
    description: >-
      Test `listAvailablePlugins` handles collections that are empty or do not contain valid plugin
      configuration files.
    commands:
      - plugin
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.27:
    description: >-
      Verify `listAvailablePlugins` gracefully handles collections directories that are unreadable
      or corrupt.
    commands:
      - plugin
      - collection
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.1.28:
    description: >-
      Test `listAvailablePlugins` correctly extracts the `description` from the plugin's
      configuration file.
    commands:
      - plugin
    runner: test/integration/collections/collections-manager.test.js
    manifest: test/integration/collections/collections-manager.list.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - collections
      - integration
      - all
      - rank1
    app_files:
      - src/collections-manager/
  2.2.1:
    description: >-
      Verify the `handle` function successfully processes a basic Markdown file, extracts front
      matter, renders HTML, applies default CSS, and generates a PDF.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.2:
    description: Test `handle` correctly removes shortcodes from Markdown content before rendering.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.3:
    description: Verify `handle` correctly substitutes placeholders in Markdown content before rendering.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.4:
    description: >-
      Test `handle` correctly applies `pluginSpecificConfig.markdown_it_options` to the MarkdownIt
      instance.
    commands:
      - plugin
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.5:
    description: >-
      Verify `handle` integrates math rendering by calling
      `math_integration.configureMarkdownItForMath` and `math_integration.getMathCssContent` when
      configured.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.6:
    description: >-
      Test `handle` correctly applies `markdown-it-anchor` and `markdown-it-table-of-contents` when
      configured in `pluginSpecificConfig`.
    commands:
      - plugin
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.7:
    description: >-
      Verify `handle` correctly integrates custom MarkdownIt plugins specified in
      `pluginSpecificConfig.markdown_it_plugins`.
    commands:
      - plugin
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.8:
    description: >-
      Test `handle` resolves and merges CSS files from `pluginSpecificConfig.css_files` and
      `raw_css_files`, injecting them into the HTML output.
    commands:
      - plugin
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.9:
    description: >-
      Verify `handle` correctly loads and uses a custom HTML template specified by
      `pluginSpecificConfig.html_template_path`.
    commands:
      - plugin
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.10:
    description: >-
      Test `handle` correctly injects `head_html`, `body_html_start`, and `body_html_end` from
      `pluginSpecificConfig` into the HTML template.
    commands:
      - plugin
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.11:
    description: >-
      Verify `handle` correctly determines the output filename based on `outputFilenameOpt`, front
      matter, or the input Markdown file name.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.12:
    description: Test `handle` gracefully manages errors during Markdown file reading, returning `null`.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.13:
    description: >-
      Verify `handle` calls `pdfGenerator.generatePdf` with the correctly prepared HTML content and
      PDF options.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.14:
    description: >-
      Test `handle` correctly applies the `lang` attribute from front matter to the HTML `<html>`
      tag.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.15:
    description: >-
      Verify `handle` correctly handles `omit_title_heading` to prevent the title heading from being
      rendered when true.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.2.16:
    description: >-
      Test `handle` returns `null` and logs an error if any critical step in the pipeline (e.g.,
      HTML rendering, PDF generation) fails.
    commands: []
    runner: test/integration/core/default-handler.test.js
    manifest: test/integration/core/default-handler.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/default-handler.js
  2.3.1:
    description: >-
      Verify `generatePdf` successfully launches Puppeteer, navigates to a blank page, sets HTML
      content, and generates a PDF file to the specified output path.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.2:
    description: >-
      Test `generatePdf` correctly applies various `pdfOptions` such as `format`, `printBackground`,
      and `scale`.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.3:
    description: >-
      Verify `generatePdf` correctly applies `margin` options (top, bottom, left, right) from
      `pdfOptions`.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.4:
    description: Test `generatePdf` injects `cssContent` into the generated HTML page before rendering the PDF.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.5:
    description: >-
      Verify `generatePdf` correctly handles header and footer templates, including dynamic fields,
      when provided in `pdfOptions`.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.6:
    description: >-
      Test `generatePdf` returns `null` and logs an error if Puppeteer fails to launch (e.g.,
      executable not found).
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.7:
    description: Verify `generatePdf` returns `null` and logs an error if setting page content fails.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.8:
    description: >-
      Test `generatePdf` returns `null` and logs an error if PDF generation itself fails (e.g.,
      invalid `pdfOptions`).
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.9:
    description: >-
      Verify `generatePdf` ensures the browser and page are properly closed after PDF generation,
      even if errors occur.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.3.10:
    description: >-
      Test `generatePdf` correctly handles empty or null `htmlContent` and `cssContent` without
      crashing.
    commands: []
    runner: test/integration/core/pdf-generator.test.js
    manifest: test/integration/core/pdf-generator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - core
      - integration
      - all
      - rank0
    app_files:
      - src/core/pdf-generator.js
  2.4.1:
    description: >-
      Verify a fully compliant v1 plugin (all files, passing tests, successful self-activation) is
      reported as `VALID` with no errors or warnings.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.2:
    description: >-
      Test that a plugin with an unsupported protocol (e.g., `v2`) is reported as `INVALID` with a
      clear error message.
    commands:
      - plugin
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.3:
    description: >-
      Verify that a plugin whose directory name does not match the `plugin_name` in its metadata is
      reported as `INVALID` with a critical mismatch error.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.4:
    description: >-
      Test the metadata resolution precedence: `protocol` from `.schema.json` should be used even if
      different values exist in `.config.yaml` and `README.md`.
    commands: []
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.5:
    description: >-
      Test that a plugin missing a `protocol` in all its metadata files defaults to `v1` and is
      reported as `USABLE (with warnings)`.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.6:
    description: Verify that a plugin with a missing required file (e.g., `index.js`) is reported as `INVALID`.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.7:
    description: >-
      Test that a plugin with a missing optional file (e.g., `test/cv-e2e.test.js` or
      `cv.schema.json`) is reported as `USABLE (with warnings)`.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.8:
    description: Verify that a plugin whose co-located E2E test fails when executed is reported as `INVALID`.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.9:
    description: >-
      Test that a plugin whose self-activation sanity check fails (e.g., the CLI command returns an
      error) is reported as `INVALID`.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
  2.4.10:
    description: >-
      Test a plugin with malformed YAML in its `README.md` front matter, which should result in a
      `USABLE (with warnings)` status, assuming other checks pass.
    commands:
      - plugin validate
    runner: test/integration/plugins/plugin-validator.test.js
    manifest: test/integration/plugins/plugin-validator.manifest.js
    reference: test/docs/test-generation-priority-order.md
    mocha_groups:
      - level2
      - plugins
      - integration
      - all
      - rank2
    app_files:
      - src/plugins/validator.js
